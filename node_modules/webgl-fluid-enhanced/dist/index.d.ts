declare type AtLeastOne<T, U = {
    [K in keyof T]: Pick<T, K>;
}> = Partial<T> & U[keyof U];

declare type Config = AtLeastOne<ConfigOptions>;

declare type ConfigOptions = {
    simResolution: number;
    dyeResolution: number;
    captureResolution: number;
    densityDissipation: number;
    velocityDissipation: number;
    pressure: number;
    pressureIterations: number;
    curl: number;
    splatRadius: number;
    splatForce: number;
    shading: boolean;
    colorful: boolean;
    colorUpdateSpeed: number;
    colorPalette: string[];
    hover: boolean;
    backgroundColor: string;
    inverted: boolean;
    transparent: boolean;
    brightness: number;
    bloom: boolean;
    bloomIterations: number;
    bloomResolution: number;
    bloomIntensity: number;
    bloomThreshold: number;
    bloomSoftKnee: number;
    sunrays: boolean;
    sunraysResolution: number;
    sunraysWeight: number;
};

export declare const defaultConfig: {
    simResolution: number;
    dyeResolution: number;
    captureResolution: number;
    densityDissipation: number;
    velocityDissipation: number;
    pressure: number;
    pressureIterations: number;
    curl: number;
    splatRadius: number;
    splatForce: number;
    shading: boolean;
    colorful: boolean;
    colorUpdateSpeed: number;
    colorPalette: never[];
    hover: boolean;
    inverted: boolean;
    backgroundColor: string;
    transparent: boolean;
    brightness: number;
    bloom: boolean;
    bloomIterations: number;
    bloomResolution: number;
    bloomIntensity: number;
    bloomThreshold: number;
    bloomSoftKnee: number;
    sunrays: boolean;
    sunraysResolution: number;
    sunraysWeight: number;
};

declare class WebGLFluidEnhanced {
    private container;
    private simulation;
    constructor(container?: HTMLElement);
    start(): void;
    stop(): void;
    togglePause(drawWhilePaused?: boolean): boolean;
    multipleSplats(amount: number): void;
    splatAtLocation(x: number, y: number, dx: number, dy: number, HEXColor?: string): void;
    downloadScreenshot(): void;
    setConfig(config: Config): void;
}
export default WebGLFluidEnhanced;

export { }

export namespace plugins {
    let tailwindcss: {};
    let autoprefixer: {};
}

